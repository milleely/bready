// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id                String             @id @default(cuid())
  clerkId           String             @unique // Clerk user ID (household owner)
  name              String             // Household name
  users             User[]             // Household members (up to 4)
  budgets           Budget[]           // Household budgets
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String?            // Optional: only owner has Clerk email
  avatar            String?
  color             String             // For UI theming
  isOwner           Boolean            @default(false) // True for household owner
  householdId       String             // Foreign key to Household
  household         Household          @relation(fields: [householdId], references: [id], onDelete: Cascade)
  expenses          Expense[]
  recurringExpenses RecurringExpense[]
  createdAt         DateTime           @default(now())

  @@index([householdId])
}

model Expense {
  id                  String            @id @default(cuid())
  amount              Float
  category            String
  description         String
  date                DateTime
  isShared            Boolean           @default(false)
  receiptUrl          String?           // Optional: URL/path to receipt image
  userId              String
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  recurringExpenseId  String?           // Optional: ID of recurring expense that generated this
  recurringExpense    RecurringExpense? @relation(fields: [recurringExpenseId], references: [id], onDelete: SetNull)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([userId])
  @@index([category])
  @@index([date])
  @@index([recurringExpenseId])
}

model Budget {
  id          String    @id @default(cuid())
  category    String
  amount      Float
  month       String    // Format: "YYYY-MM"
  userId      String?   // Optional: null means shared budget for all users in household
  householdId String    // Link to household for proper isolation
  household   Household @relation(fields: [householdId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([category, month, userId, householdId])
  @@index([month])
  @@index([userId])
  @@index([householdId])
}

model RecurringExpense {
  id          String    @id @default(cuid())
  amount      Float
  category    String
  description String
  frequency   String    // "monthly", "weekly", "yearly"
  dayOfMonth  Int?      // For monthly: 1-31 (day of month to create expense)
  dayOfWeek   Int?      // For weekly: 0-6 (0=Sunday)
  monthOfYear Int?      // For yearly: 1-12
  isShared    Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  nextDate    DateTime  // Next date to create the expense
  isActive    Boolean   @default(true)
  expenses    Expense[] // Expenses generated from this recurring expense
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([nextDate])
  @@index([isActive])
}

model Settlement {
  id          String   @id @default(cuid())
  fromUserId  String   // User who owes money
  toUserId    String   // User who receives money
  amount      Float    // Amount paid
  date        DateTime @default(now()) // When the payment was made
  month       String   // Format: "YYYY-MM" - which month this settlement applies to
  note        String?  // Optional note about the payment
  createdAt   DateTime @default(now())

  @@index([fromUserId])
  @@index([toUserId])
  @@index([month])
  @@index([date])
}
